[gd_scene load_steps=12 format=2]

[ext_resource path="res://modeli/basicStio.tscn" type="PackedScene" id=1]
[ext_resource path="res://modeli/material_0.material" type="Material" id=2]
[ext_resource path="res://game/Game.tscn" type="PackedScene" id=3]
[ext_resource path="res://modeli/Screen.gd" type="Script" id=4]

[sub_resource type="Environment" id=1]
background_mode = 1
background_energy = 0.0
glow_enabled = true
glow_intensity = 2.82
glow_strength = 1.09
glow_blend_mode = 0
glow_hdr_threshold = 3.09
glow_bicubic_upscale = true
glow_high_quality = true
adjustment_brightness = 0.5

[sub_resource type="ArrayMesh" id=2]
resource_name = "flop_Object_0001"
surfaces/0 = {
"aabb": AABB( -1.8294, -1.7717, 0, 3.7038, 3.54341, 0.1181 ),
"array_data": PoolByteArray( 28, 124, 209, 191, 17, 199, 226, 63, 0, 0, 0, 0, 193, 63, 127, 129, 1, 56, 152, 55, 199, 41, 234, 191, 113, 61, 202, 63, 0, 0, 0, 0, 193, 63, 127, 129, 1, 56, 254, 55, 199, 41, 234, 191, 113, 61, 202, 63, 106, 222, 241, 61, 193, 63, 127, 129, 197, 55, 254, 55, 28, 124, 209, 191, 17, 199, 226, 63, 106, 222, 241, 61, 193, 63, 127, 129, 197, 55, 152, 55, 141, 151, 206, 63, 129, 4, 213, 63, 106, 222, 241, 61, 0, 129, 0, 193, 155, 37, 16, 56, 13, 113, 188, 63, 129, 4, 213, 63, 106, 222, 241, 61, 0, 129, 0, 193, 155, 37, 53, 56, 13, 113, 188, 63, 129, 4, 213, 63, 0, 0, 0, 0, 0, 129, 0, 193, 220, 30, 53, 56, 141, 151, 206, 63, 129, 4, 213, 63, 0, 0, 0, 0, 0, 129, 0, 193, 220, 30, 16, 56, 13, 113, 188, 63, 116, 181, 189, 63, 106, 222, 241, 61, 0, 127, 0, 193, 246, 37, 147, 56, 141, 151, 206, 63, 116, 181, 189, 63, 106, 222, 241, 61, 0, 127, 0, 193, 246, 37, 184, 56, 141, 151, 206, 63, 116, 181, 189, 63, 0, 0, 0, 0, 0, 127, 0, 193, 37, 32, 184, 56, 13, 113, 188, 63, 116, 181, 189, 63, 0, 0, 0, 0, 0, 127, 0, 193, 37, 32, 147, 56, 199, 41, 234, 191, 242, 176, 216, 191, 106, 222, 241, 61, 0, 0, 1, 130, 172, 40, 254, 55, 199, 41, 234, 191, 242, 176, 216, 191, 106, 222, 241, 61, 0, 0, 0, 129, 172, 40, 254, 55, 64, 164, 231, 191, 137, 65, 224, 191, 106, 222, 241, 61, 0, 0, 1, 130, 101, 39, 243, 55, 240, 22, 224, 191, 17, 199, 226, 191, 106, 222, 241, 61, 0, 0, 1, 130, 194, 38, 212, 55, 240, 22, 224, 191, 17, 199, 226, 191, 106, 222, 241, 61, 0, 0, 0, 130, 194, 38, 212, 55, 240, 22, 224, 191, 17, 199, 226, 191, 106, 222, 241, 61, 0, 0, 0, 130, 194, 38, 212, 55, 240, 22, 224, 191, 17, 199, 226, 191, 106, 222, 241, 61, 0, 0, 0, 130, 194, 38, 212, 55, 240, 22, 224, 191, 17, 199, 226, 191, 106, 222, 241, 61, 0, 0, 0, 130, 194, 38, 212, 55, 199, 41, 234, 191, 113, 61, 202, 63, 106, 222, 241, 61, 0, 0, 0, 129, 86, 55, 254, 55, 199, 41, 234, 191, 113, 61, 202, 63, 106, 222, 241, 61, 0, 0, 0, 130, 86, 55, 254, 55, 28, 124, 209, 191, 17, 199, 226, 63, 106, 222, 241, 61, 0, 0, 0, 130, 187, 55, 152, 55, 28, 124, 209, 191, 17, 199, 226, 63, 106, 222, 241, 61, 0, 0, 0, 130, 187, 55, 152, 55, 28, 124, 209, 191, 17, 199, 226, 63, 106, 222, 241, 61, 0, 0, 0, 129, 187, 55, 152, 55, 28, 124, 209, 191, 17, 199, 226, 63, 106, 222, 241, 61, 0, 0, 0, 130, 187, 55, 152, 55, 207, 102, 237, 63, 137, 65, 224, 191, 106, 222, 241, 61, 0, 0, 0, 130, 101, 39, 69, 38, 87, 236, 239, 63, 242, 176, 216, 191, 106, 222, 241, 61, 0, 0, 0, 129, 172, 40, 155, 37, 87, 236, 239, 63, 242, 176, 216, 63, 106, 222, 241, 61, 0, 0, 0, 130, 145, 55, 155, 37, 87, 236, 239, 63, 242, 176, 216, 63, 106, 222, 241, 61, 0, 0, 1, 130, 145, 55, 155, 37, 207, 102, 237, 63, 137, 65, 224, 63, 106, 222, 241, 61, 0, 0, 1, 130, 176, 55, 69, 38, 127, 217, 229, 63, 17, 199, 226, 63, 106, 222, 241, 61, 0, 0, 0, 130, 187, 55, 27, 40, 127, 217, 229, 63, 17, 199, 226, 63, 106, 222, 241, 61, 0, 0, 0, 130, 187, 55, 27, 40, 127, 217, 229, 63, 17, 199, 226, 63, 106, 222, 241, 61, 0, 0, 1, 130, 187, 55, 27, 40, 127, 217, 229, 63, 17, 199, 226, 191, 106, 222, 241, 61, 0, 0, 0, 129, 194, 38, 27, 40, 127, 217, 229, 63, 17, 199, 226, 191, 106, 222, 241, 61, 0, 0, 0, 130, 194, 38, 27, 40, 207, 102, 237, 63, 137, 65, 224, 191, 0, 0, 0, 0, 127, 127, 0, 130, 101, 39, 241, 59, 127, 217, 229, 63, 17, 199, 226, 191, 0, 0, 0, 0, 127, 127, 0, 130, 194, 38, 226, 59, 127, 217, 229, 63, 17, 199, 226, 63, 0, 0, 0, 0, 127, 127, 0, 130, 187, 55, 226, 59, 127, 217, 229, 63, 17, 199, 226, 63, 0, 0, 0, 0, 127, 127, 0, 130, 187, 55, 226, 59, 207, 102, 237, 63, 137, 65, 224, 63, 0, 0, 0, 0, 127, 127, 0, 130, 176, 55, 241, 59, 87, 236, 239, 63, 242, 176, 216, 63, 0, 0, 0, 0, 127, 127, 0, 130, 145, 55, 246, 59, 87, 236, 239, 63, 242, 176, 216, 63, 0, 0, 0, 0, 127, 127, 0, 130, 145, 55, 246, 59, 87, 236, 239, 63, 242, 176, 216, 191, 0, 0, 0, 0, 127, 127, 0, 129, 172, 40, 246, 59, 64, 164, 231, 191, 137, 65, 224, 191, 0, 0, 0, 0, 127, 127, 0, 130, 101, 39, 41, 56, 64, 164, 231, 191, 137, 65, 224, 191, 0, 0, 0, 0, 127, 127, 0, 130, 101, 39, 41, 56, 199, 41, 234, 191, 242, 176, 216, 191, 0, 0, 0, 0, 127, 127, 0, 129, 172, 40, 36, 56, 199, 41, 234, 191, 113, 61, 202, 63, 0, 0, 0, 0, 127, 127, 0, 130, 86, 55, 36, 56, 28, 124, 209, 191, 17, 199, 226, 63, 0, 0, 0, 0, 127, 127, 0, 130, 187, 55, 87, 56, 28, 124, 209, 191, 17, 199, 226, 63, 0, 0, 0, 0, 127, 127, 0, 130, 187, 55, 87, 56, 240, 22, 224, 191, 17, 199, 226, 191, 0, 0, 0, 0, 127, 127, 0, 130, 194, 38, 57, 56, 240, 22, 224, 191, 17, 199, 226, 191, 0, 0, 0, 0, 127, 127, 0, 130, 194, 38, 57, 56, 13, 113, 188, 63, 129, 4, 213, 63, 106, 222, 241, 61, 127, 0, 0, 193, 115, 37, 80, 56, 13, 113, 188, 63, 116, 181, 189, 63, 106, 222, 241, 61, 127, 0, 0, 193, 115, 37, 128, 56, 13, 113, 188, 63, 116, 181, 189, 63, 0, 0, 0, 0, 127, 0, 0, 193, 36, 30, 128, 56, 13, 113, 188, 63, 129, 4, 213, 63, 0, 0, 0, 0, 127, 0, 0, 193, 36, 30, 80, 56, 141, 151, 206, 63, 116, 181, 189, 63, 106, 222, 241, 61, 129, 0, 0, 193, 43, 37, 207, 57, 141, 151, 206, 63, 129, 4, 213, 63, 106, 222, 241, 61, 129, 0, 0, 193, 43, 37, 0, 58, 141, 151, 206, 63, 129, 4, 213, 63, 0, 0, 0, 0, 129, 0, 0, 193, 4, 29, 0, 58, 141, 151, 206, 63, 116, 181, 189, 63, 0, 0, 0, 0, 129, 0, 0, 193, 4, 29, 207, 57, 13, 113, 188, 63, 129, 4, 213, 63, 106, 222, 241, 61, 0, 0, 0, 130, 130, 55, 185, 44, 13, 113, 188, 63, 129, 4, 213, 63, 106, 222, 241, 61, 0, 0, 0, 129, 130, 55, 185, 44, 141, 151, 206, 63, 129, 4, 213, 63, 106, 222, 241, 61, 0, 0, 0, 130, 130, 55, 26, 43, 13, 113, 188, 63, 116, 181, 189, 63, 106, 222, 241, 61, 0, 0, 0, 130, 34, 55, 185, 44, 13, 113, 188, 63, 116, 181, 189, 63, 106, 222, 241, 61, 0, 0, 0, 130, 34, 55, 185, 44, 141, 151, 206, 63, 116, 181, 189, 63, 106, 222, 241, 61, 0, 0, 0, 129, 34, 55, 26, 43, 141, 151, 206, 63, 116, 181, 189, 63, 106, 222, 241, 61, 0, 0, 0, 130, 34, 55, 26, 43, 13, 113, 188, 63, 116, 181, 189, 63, 0, 0, 0, 0, 127, 127, 0, 130, 34, 55, 140, 59, 141, 151, 206, 63, 116, 181, 189, 63, 0, 0, 0, 0, 127, 127, 0, 130, 34, 55, 178, 59, 13, 113, 188, 63, 129, 4, 213, 63, 0, 0, 0, 0, 127, 127, 255, 130, 130, 55, 140, 59, 141, 151, 206, 63, 129, 4, 213, 63, 0, 0, 0, 0, 127, 127, 0, 129, 130, 55, 178, 59, 141, 151, 206, 63, 129, 4, 213, 63, 0, 0, 0, 0, 127, 127, 0, 130, 130, 55, 178, 59, 87, 236, 239, 63, 242, 176, 216, 191, 0, 0, 0, 0, 109, 239, 17, 138, 172, 40, 95, 27, 87, 236, 239, 63, 242, 176, 216, 63, 0, 0, 0, 0, 109, 17, 239, 138, 145, 55, 95, 27, 87, 236, 239, 63, 242, 176, 216, 63, 106, 222, 241, 61, 109, 17, 239, 138, 145, 55, 208, 36, 87, 236, 239, 63, 242, 176, 216, 191, 106, 222, 241, 61, 109, 239, 17, 138, 172, 40, 208, 36, 127, 217, 229, 63, 17, 199, 226, 63, 0, 0, 0, 0, 17, 109, 127, 129, 1, 56, 27, 40, 28, 124, 209, 191, 17, 199, 226, 63, 0, 0, 0, 0, 0, 127, 127, 129, 1, 56, 152, 55, 28, 124, 209, 191, 17, 199, 226, 63, 106, 222, 241, 61, 0, 127, 127, 129, 197, 55, 152, 55, 127, 217, 229, 63, 17, 199, 226, 63, 106, 222, 241, 61, 17, 109, 130, 255, 197, 55, 27, 40, 199, 41, 234, 191, 113, 61, 202, 63, 0, 0, 0, 0, 129, 0, 0, 129, 86, 55, 32, 56, 199, 41, 234, 191, 242, 176, 216, 191, 0, 0, 0, 0, 147, 239, 239, 138, 172, 40, 32, 56, 199, 41, 234, 191, 242, 176, 216, 191, 106, 222, 241, 61, 147, 239, 239, 138, 172, 40, 1, 56, 199, 41, 234, 191, 113, 61, 202, 63, 106, 222, 241, 61, 129, 0, 0, 129, 86, 55, 1, 56, 240, 22, 224, 191, 17, 199, 226, 191, 0, 0, 0, 0, 239, 147, 0, 193, 63, 30, 209, 55, 127, 217, 229, 63, 17, 199, 226, 191, 0, 0, 0, 0, 17, 147, 0, 193, 63, 30, 1, 40, 127, 217, 229, 63, 17, 199, 226, 191, 106, 222, 241, 61, 17, 147, 0, 193, 115, 37, 1, 40, 240, 22, 224, 191, 17, 199, 226, 191, 106, 222, 241, 61, 239, 147, 0, 193, 115, 37, 209, 55, 207, 102, 237, 63, 137, 65, 224, 63, 0, 0, 0, 0, 63, 63, 193, 161, 176, 55, 95, 27, 207, 102, 237, 63, 137, 65, 224, 63, 106, 222, 241, 61, 63, 63, 193, 161, 176, 55, 208, 36, 207, 102, 237, 63, 137, 65, 224, 191, 106, 222, 241, 61, 63, 193, 63, 161, 101, 39, 208, 36, 207, 102, 237, 63, 137, 65, 224, 191, 0, 0, 0, 0, 63, 193, 63, 161, 101, 39, 95, 27, 64, 164, 231, 191, 137, 65, 224, 191, 0, 0, 0, 0, 193, 193, 193, 161, 101, 39, 32, 56, 64, 164, 231, 191, 137, 65, 224, 191, 106, 222, 241, 61, 193, 193, 193, 161, 101, 39, 1, 56, 207, 102, 237, 63, 137, 65, 224, 63, 106, 222, 241, 61, 63, 63, 130, 255, 197, 55, 69, 38, 207, 102, 237, 63, 137, 65, 224, 63, 0, 0, 0, 0, 63, 63, 126, 130, 1, 56, 69, 38, 207, 102, 237, 63, 137, 65, 224, 191, 0, 0, 0, 0, 63, 193, 0, 193, 63, 30, 17, 38, 207, 102, 237, 63, 137, 65, 224, 191, 106, 222, 241, 61, 63, 193, 0, 193, 115, 37, 17, 38, 64, 164, 231, 191, 137, 65, 224, 191, 106, 222, 241, 61, 193, 193, 0, 193, 115, 37, 240, 55, 64, 164, 231, 191, 137, 65, 224, 191, 0, 0, 0, 0, 193, 193, 0, 193, 63, 30, 240, 55 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 2, 0, 0, 0, 3, 0, 4, 0, 6, 0, 5, 0, 6, 0, 4, 0, 7, 0, 8, 0, 10, 0, 9, 0, 10, 0, 8, 0, 11, 0, 12, 0, 15, 0, 14, 0, 20, 0, 17, 0, 13, 0, 25, 0, 18, 0, 21, 0, 26, 0, 28, 0, 27, 0, 29, 0, 33, 0, 30, 0, 26, 0, 32, 0, 28, 0, 34, 0, 32, 0, 26, 0, 36, 0, 38, 0, 37, 0, 39, 0, 42, 0, 40, 0, 36, 0, 41, 0, 38, 0, 43, 0, 41, 0, 36, 0, 44, 0, 47, 0, 46, 0, 44, 0, 48, 0, 47, 0, 51, 0, 49, 0, 45, 0, 52, 0, 54, 0, 53, 0, 54, 0, 52, 0, 55, 0, 56, 0, 58, 0, 57, 0, 58, 0, 56, 0, 59, 0, 31, 0, 60, 0, 23, 0, 61, 0, 32, 0, 62, 0, 22, 0, 63, 0, 16, 0, 64, 0, 24, 0, 61, 0, 19, 0, 66, 0, 35, 0, 65, 0, 17, 0, 64, 0, 34, 0, 62, 0, 32, 0, 62, 0, 34, 0, 65, 0, 37, 0, 67, 0, 50, 0, 67, 0, 37, 0, 68, 0, 50, 0, 69, 0, 48, 0, 69, 0, 50, 0, 67, 0, 49, 0, 71, 0, 39, 0, 70, 0, 48, 0, 69, 0, 38, 0, 68, 0, 37, 0, 68, 0, 38, 0, 70, 0, 72, 0, 74, 0, 73, 0, 74, 0, 72, 0, 75, 0, 76, 0, 78, 0, 77, 0, 78, 0, 76, 0, 79, 0, 80, 0, 82, 0, 81, 0, 82, 0, 80, 0, 83, 0, 84, 0, 86, 0, 85, 0, 86, 0, 84, 0, 87, 0, 88, 0, 74, 0, 89, 0, 74, 0, 88, 0, 73, 0, 90, 0, 72, 0, 91, 0, 72, 0, 90, 0, 75, 0, 92, 0, 82, 0, 93, 0, 82, 0, 92, 0, 81, 0, 76, 0, 94, 0, 79, 0, 94, 0, 76, 0, 95, 0, 86, 0, 96, 0, 85, 0, 96, 0, 86, 0, 97, 0, 84, 0, 98, 0, 87, 0, 98, 0, 84, 0, 99, 0 ),
"blend_shape_data": [  ],
"format": 2194711,
"index_count": 180,
"material": ExtResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 100
}

[sub_resource type="Animation" id=3]
resource_name = "New Anim"
length = 12.0
tracks/0/type = "bezier"
tracks/0/path = NodePath("Camera:translation:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 4 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("Camera:translation:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 4.12222, -0.25, 0, 1.8, -0.0407019, 2.674, -2.2, -0.0878999, 0.25, 0 ),
"times": PoolRealArray( 0, 4 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("Camera:translation:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 6.94868, -0.25, 0, 1.9, -0.063241, 5.208, -2.1, -0.0983753, 0.25, 0 ),
"times": PoolRealArray( 0, 4 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath("Camera:rotation_degrees:x")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( -65.905, -0.25, 0, 1.3, 1.81189, -42.874, -0.5, 15.4321, 0.5, -15.4321, -14.9161, -0.7, -1.60751, 0.2, 0.401878, -23.937, -0.5, -0.0341034, 0.25, 0, -12.973, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1.3, 2.4, 4, 12 )
}
tracks/4/type = "bezier"
tracks/4/path = NodePath("Camera:rotation_degrees:y")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 1.055, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1.2, 3.1, 4, 12 )
}
tracks/5/type = "bezier"
tracks/5/path = NodePath("Camera:rotation_degrees:z")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1.2, 3.1, 4, 12 )
}
tracks/6/type = "bezier"
tracks/6/path = NodePath("SpotLight:light_energy")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 1, -0.8, 0.0381615, 0.8, -0.0381615, 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0.407787, -0.239172, 0.269345, 0.239172, -0.269345, 0.562904, -0.139172, 0.41269, 0.139172, -0.41269, 0.992266, -0.206519, -0.00842547, 0.206519, 0.00842547 ),
"times": PoolRealArray( 2.8, 3, 3.1, 3.2, 3.3, 3.6, 3.8, 4.2 )
}
tracks/7/type = "bezier"
tracks/7/path = NodePath("SpotLight2:light_energy")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 4.8, 4.9 )
}
tracks/8/type = "bezier"
tracks/8/path = NodePath("flop:translation:x")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"points": PoolRealArray( -8.8246, -0.25, 0, 0.25, 0, -0.0227426, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, -0.121109, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 4.7, 5.9, 6.9, 7.9, 10.2, 10.9 )
}
tracks/9/type = "bezier"
tracks/9/path = NodePath("flop:translation:y")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/keys = {
"points": PoolRealArray( 0.587211, -0.25, 0, 0.25, 0, 1.25264, -0.25, 0, 0.25, 0, 1.31935, -0.25, 0, 0.25, 0, 1.31935, -0.25, 0, 0.25, 0, 0.587211, -0.25, 0, 0.25, 0, 0.454596, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 4.7, 5.9, 6.9, 7.9, 10.2, 10.9 )
}
tracks/10/type = "bezier"
tracks/10/path = NodePath("flop:translation:z")
tracks/10/interp = 1
tracks/10/loop_wrap = true
tracks/10/imported = false
tracks/10/enabled = true
tracks/10/keys = {
"points": PoolRealArray( 4.90028, -0.25, 0, 0.25, 0, 1.6131, -0.25, 0, 0.25, 0, 1.6131, -0.25, 0, 0.25, 0, 1.6131, -0.25, 0, 0.25, 0, 1.6131, -0.25, 0, 0.25, 0, 0.632734, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 4.7, 5.9, 6.9, 7.9, 10.2, 10.9 )
}
tracks/11/type = "bezier"
tracks/11/path = NodePath("flop:rotation_degrees:x")
tracks/11/interp = 1
tracks/11/loop_wrap = true
tracks/11/imported = false
tracks/11/enabled = true
tracks/11/keys = {
"points": PoolRealArray( -90, -0.25, 0, 0.25, 0, -41.472, -0.25, 0, 0.25, 0, -37.197, -0.25, 0, 0.25, 0, -37.197, -0.25, 0, 0.25, 0, -90, -0.25, 0, 0.25, 0, -90, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 4.7, 5.9, 6.9, 7.9, 10.2, 10.9 )
}
tracks/12/type = "bezier"
tracks/12/path = NodePath("flop:rotation_degrees:y")
tracks/12/interp = 1
tracks/12/loop_wrap = true
tracks/12/imported = false
tracks/12/enabled = true
tracks/12/keys = {
"points": PoolRealArray( 179, -0.25, 0, 0.25, 0, -4.43935e-06, -0.25, 0, 0.25, 0, -24.333, -0.25, 0, 0.25, 0, 51.377, -0.25, 0, 0.25, 0, 179, -0.25, 0, 0.25, 0, -172.48, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 4.7, 5.9, 6.9, 7.9, 10.2, 10.9 )
}
tracks/13/type = "bezier"
tracks/13/path = NodePath("flop:rotation_degrees:z")
tracks/13/interp = 1
tracks/13/loop_wrap = true
tracks/13/imported = false
tracks/13/enabled = true
tracks/13/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 71.853, -0.25, 0, 0.25, 0, -91, -0.25, 0, 0.25, 0, -91, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 4.7, 5.9, 6.9, 7.9, 10.2, 10.9 )
}
tracks/14/type = "bezier"
tracks/14/path = NodePath("Camera:fov")
tracks/14/interp = 1
tracks/14/loop_wrap = true
tracks/14/imported = false
tracks/14/enabled = true
tracks/14/keys = {
"points": PoolRealArray( 60.1, -0.25, 0, 0.25, 0, 15.2, -1.26363, -0.00118637, 1.26363, 0.00118637 ),
"times": PoolRealArray( 10.9, 12 )
}
tracks/15/type = "value"
tracks/15/path = NodePath("Camera:current")
tracks/15/interp = 1
tracks/15/loop_wrap = true
tracks/15/imported = false
tracks/15/enabled = true
tracks/15/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/16/type = "value"
tracks/16/path = NodePath("Screen:visible")
tracks/16/interp = 1
tracks/16/loop_wrap = true
tracks/16/imported = false
tracks/16/enabled = true
tracks/16/keys = {
"times": PoolRealArray( 0, 12 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}
tracks/17/type = "method"
tracks/17/path = NodePath("Screen")
tracks/17/interp = 1
tracks/17/loop_wrap = true
tracks/17/imported = false
tracks/17/enabled = true
tracks/17/keys = {
"times": PoolRealArray( -0.1, 12 ),
"transitions": PoolRealArray( 1, 1 ),
"values": [ {
"args": [ false ],
"method": "set_process"
}, {
"args": [ true ],
"method": "set_process"
} ]
}

[sub_resource type="Animation" id=4]
resource_name = "New Anim2"
length = 22.475
tracks/0/type = "bezier"
tracks/0/path = NodePath("Camera:translation:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("Camera:translation:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 2.674, -2.2, -0.0878999, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("Camera:translation:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 5.208, -2.1, -0.0983753, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath("Camera:rotation_degrees:x")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( -12.973, -3, -0.00736713, 3, 0.00736713, -23.5886, -1.3, 0.241093, 1.3, -0.241093 ),
"times": PoolRealArray( 0, 2.7 )
}
tracks/4/type = "bezier"
tracks/4/path = NodePath("Camera:rotation_degrees:y")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"points": PoolRealArray( 1.055, -2.9, 0.95961, 2.9, -0.95961, -28.801, -1.1, -0.239754, 1.1, 0.239754 ),
"times": PoolRealArray( 0, 2.7 )
}
tracks/5/type = "bezier"
tracks/5/path = NodePath("Camera:rotation_degrees:z")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"points": PoolRealArray( 0, -2.3, -0.0953903, 2.3, 0.0953903, 3.89912, -1.1, 0.549946, 1.1, -0.549946 ),
"times": PoolRealArray( 0, 2.7 )
}
tracks/6/type = "bezier"
tracks/6/path = NodePath("SpotLight:light_energy")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"points": PoolRealArray( 0.992266, -0.206519, -0.00842547, 0.206519, 0.00842547 ),
"times": PoolRealArray( 0 )
}
tracks/7/type = "bezier"
tracks/7/path = NodePath("SpotLight2:light_energy")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 1.8, 1.9, 2.6, 2.7, 3.8, 3.9 )
}
tracks/8/type = "bezier"
tracks/8/path = NodePath("Camera:fov")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"points": PoolRealArray( 15.2, -0.4, -0.300701, 0.4, 0.300701, 59.3723, -0.25, 0, 0.25, 0, 41.7, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1.9, 2.7 )
}
tracks/9/type = "value"
tracks/9/path = NodePath("Camera2:current")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/keys = {
"times": PoolRealArray( 0, 2.7 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}
tracks/10/type = "value"
tracks/10/path = NodePath("Camera:current")
tracks/10/interp = 1
tracks/10/loop_wrap = true
tracks/10/imported = false
tracks/10/enabled = true
tracks/10/keys = {
"times": PoolRealArray( 2.7 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="Animation" id=5]
length = 0.001
tracks/0/type = "bezier"
tracks/0/path = NodePath("Camera:translation:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("Camera:translation:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 2.674, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("Camera:translation:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 5.208, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath("Camera:rotation_degrees:x")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( -23.937, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/4/type = "bezier"
tracks/4/path = NodePath("Camera:rotation_degrees:y")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/5/type = "bezier"
tracks/5/path = NodePath("Camera:rotation_degrees:z")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/6/type = "bezier"
tracks/6/path = NodePath("SpotLight:light_energy")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/7/type = "bezier"
tracks/7/path = NodePath("SpotLight2:light_energy")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/8/type = "bezier"
tracks/8/path = NodePath("flop:translation:x")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/9/type = "bezier"
tracks/9/path = NodePath("flop:translation:y")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/keys = {
"points": PoolRealArray( 0.587211, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/10/type = "bezier"
tracks/10/path = NodePath("flop:translation:z")
tracks/10/interp = 1
tracks/10/loop_wrap = true
tracks/10/imported = false
tracks/10/enabled = true
tracks/10/keys = {
"points": PoolRealArray( 1.6131, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/11/type = "bezier"
tracks/11/path = NodePath("flop:rotation_degrees:x")
tracks/11/interp = 1
tracks/11/loop_wrap = true
tracks/11/imported = false
tracks/11/enabled = true
tracks/11/keys = {
"points": PoolRealArray( -90, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/12/type = "bezier"
tracks/12/path = NodePath("flop:rotation_degrees:y")
tracks/12/interp = 1
tracks/12/loop_wrap = true
tracks/12/imported = false
tracks/12/enabled = true
tracks/12/keys = {
"points": PoolRealArray( 179, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/13/type = "bezier"
tracks/13/path = NodePath("flop:rotation_degrees:z")
tracks/13/interp = 1
tracks/13/loop_wrap = true
tracks/13/imported = false
tracks/13/enabled = true
tracks/13/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/14/type = "bezier"
tracks/14/path = NodePath("Camera:fov")
tracks/14/interp = 1
tracks/14/loop_wrap = true
tracks/14/imported = false
tracks/14/enabled = true
tracks/14/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/15/type = "value"
tracks/15/path = NodePath("Screen:visible")
tracks/15/interp = 1
tracks/15/loop_wrap = true
tracks/15/imported = false
tracks/15/enabled = true
tracks/15/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}

[sub_resource type="Shader" id=6]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/overlay = false
shader_param/scanlines_opacity = 0.424
shader_param/scanlines_width = 0.0
shader_param/grille_opacity = 0.331
shader_param/resolution = Vector2( 320, 180 )
shader_param/pixelate = false
shader_param/roll = true
shader_param/roll_speed = 7.08
shader_param/roll_size = 11.321
shader_param/roll_variation = 0.723
shader_param/distort_intensity = 0.004
shader_param/noise_opacity = 0.0
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.015
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 0.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[node name="Spatial" type="Spatial"]

[node name="svwe4" parent="." instance=ExtResource( 1 )]

[node name="Camera" type="Camera" parent="svwe4"]
transform = Transform( 1, 0, 0, 0, 0.913992, 0.405732, 0, -0.405732, 0.913992, 0, 2.674, 5.208 )
environment = SubResource( 1 )
current = true
fov = 15.2

[node name="Camera2" type="Camera" parent="svwe4"]
transform = Transform( 0.878809, -0.43997, 0.18472, 0, 0.387113, 0.922032, -0.477174, -0.81029, 0.340199, 2.82095, 2.11608, 0.713971 )
environment = SubResource( 1 )
current = true
fov = 68.4

[node name="SpotLight" type="SpotLight" parent="svwe4"]
transform = Transform( 0.999799, -0.0158504, 0.0122828, 0, 0.612535, 0.790444, -0.0200525, -0.790285, 0.612411, 0.0610859, 3.74278, 3.38852 )
light_color = Color( 0.654902, 0.513726, 1, 1 )
light_energy = 0.0
shadow_enabled = true
spot_range = 9.574
spot_angle = 30.82
spot_angle_attenuation = 0.339236

[node name="SpotLight2" type="SpotLight" parent="svwe4"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 2.945, 1.43, -0.437 )
light_color = Color( 0.603922, 1, 0.658824, 1 )
light_energy = 0.0
shadow_enabled = true
spot_angle = 51.61

[node name="flop" type="MeshInstance" parent="svwe4"]
transform = Transform( -0.214281, -0.0037403, -1.63493e-10, 0, -9.36795e-09, 0.214313, -0.0037403, 0.214281, 9.36649e-09, 0, 0.587211, 1.6131 )
mesh = SubResource( 2 )
skeleton = NodePath("")

[node name="OmniLight" type="OmniLight" parent="svwe4/flop"]
transform = Transform( 4.66607, -1.19209e-07, -1.19209e-07, 0, 4.66607, -2.38419e-07, 1.19209e-07, 1.19209e-07, 4.66607, 0.983086, 0.343576, 1.66096 )
omni_range = 1.102
omni_attenuation = 1.8025

[node name="AnimationPlayer" type="AnimationPlayer" parent="svwe4"]
autoplay = "New Anim"
"anims/New Anim" = SubResource( 3 )
"anims/New Anim2" = SubResource( 4 )
anims/RESET = SubResource( 5 )

[node name="Screen" type="Sprite3D" parent="svwe4"]
transform = Transform( 0.75389, 0, 0.126545, 0, 0.803, 0, -0.0961744, 0, 0.991961, -0.217, 1.644, 0.8 )
visible = false
modulate = Color( 2, 2, 2, 1 )
pixel_size = 0.0016
script = ExtResource( 4 )

[node name="Viewport" type="Viewport" parent="svwe4/Screen"]
size = Vector2( 1024, 600 )
transparent_bg = true
handle_input_locally = false
render_target_v_flip = true

[node name="Game" parent="svwe4/Screen/Viewport" instance=ExtResource( 3 )]

[node name="ColorRect" type="ColorRect" parent="svwe4/Screen/Viewport"]
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
